import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

const COMPOSE_PATH = path.resolve(__dirname, '../docker-compose.generated.yml');
const CLIENTS_ROOT = path.resolve(__dirname, '../vpn_clients_generated');
const XRAY_CONFIG_PATH = path.resolve(
  __dirname,
  '../settings/configs/xray.config.dev.json',
);

try {
  // 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  if (fs.existsSync(COMPOSE_PATH)) {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    execSync(`docker compose -f ${COMPOSE_PATH} down`, { stdio: 'inherit' });
  }

  // 2. –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª docker-compose.generated.yml
  if (fs.existsSync(COMPOSE_PATH)) {
    fs.unlinkSync(COMPOSE_PATH);
    console.log('üóëÔ∏è –£–¥–∞–ª—ë–Ω docker-compose.generated.yml');
  }

  // 3. –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É vpn_clients_generated
  if (fs.existsSync(CLIENTS_ROOT)) {
    fs.rmSync(CLIENTS_ROOT, { recursive: true, force: true });
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ vpn_clients_generated');
  }

  // 4. –û—á–∏—Å—Ç–∏—Ç—å clients[] –≤ –∫–æ–Ω—Ñ–∏–≥–µ Xray
  if (fs.existsSync(XRAY_CONFIG_PATH)) {
    const configRaw = fs.readFileSync(XRAY_CONFIG_PATH, 'utf-8');
    const config = JSON.parse(configRaw);

    if (
      config?.inbounds?.[0]?.settings?.clients &&
      Array.isArray(config.inbounds[0].settings.clients)
    ) {
      config.inbounds[0].settings.clients = [];
      fs.writeFileSync(
        XRAY_CONFIG_PATH,
        JSON.stringify(config, null, 2),
        'utf-8',
      );
      console.log('‚úÖ –û—á–∏—â–µ–Ω clients[] –≤ –∫–æ–Ω—Ñ–∏–≥–µ Xray');
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ clients[] –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
    }
  }
} catch (error: any) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
}
