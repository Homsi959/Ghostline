import { Injectable, OnModuleDestroy, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';

import { TELEGRAM_TOKEN } from 'code/common/constants';
import { WinstonService } from 'code/logger/winston.service';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º Telegram.
 */
@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  /**
   * –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf.
   */
  private bot: Telegraf;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
   *
   * @param config - –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–∫–µ–Ω Telegram)
   * @param logger - –°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫
   */
  constructor(
    private config: ConfigService, // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    private readonly logger: WinstonService, // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ —Å–æ–±—ã—Ç–∏–π
  ) {}

  /**
   * –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è.
   * –ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –±–æ—Ç –∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
   */
  onModuleInit() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const token = this.config.get<string>(TELEGRAM_TOKEN);

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º
    if (!token) {
      this.logger.error(
        `[TelegramService.onApplicationBootstrap] - 
          –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ.`,
      );
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    this.bot = new Telegraf(token);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π NestJS-–±–æ—Ç ü§ñ'));

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.help((ctx) =>
      ctx.reply('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start - –ó–∞–ø—É—Å–∫\n/help - –ü–æ–º–æ—â—å'),
    );

    try {
      void this.bot.launch();
      this.logger.log(
        `[TelegramService.onApplicationBootstrap] - –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.`,
      );
    } catch (error: any) {
      this.logger.error(
        `[TelegramService.onApplicationBootstrap] - –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error}`,
      );
    }
  }

  /**
   * –ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –º–æ–¥—É–ª—è.
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.
   */
  onModuleDestroy() {
    if (this.bot) {
      this.bot.stop();
      this.logger.log(`[TelegramService.onModuleDestroy] - –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
    }
  }
}
