import { Injectable } from '@nestjs/common';
import { UsersRepository } from 'code/database/repository/users.repository';
import { TelegramProfilesRepository } from 'code/database/repository/telegramProfiles.repository';
import { WinstonService } from 'code/logger/winston.service';
import { Context, Markup } from 'telegraf';
import { BUTTONS } from './telegram.buttons';
import { MESSAGES } from './telegram.messages';

@Injectable()
export class TelegramService {
  constructor(
    private readonly usersRepo: UsersRepository,
    private readonly tgProfilesRepo: TelegramProfilesRepository,
    private readonly logger: WinstonService,
  ) {}

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞: —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
   * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
   */
  public async startBot(ctx: Context): Promise<void> {
    if ('message' in ctx.update) {
      const user = ctx.update.message.from;
      const { id } = user;

      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º, –µ—Å—Ç—å –ª–∏ Telegram –ø—Ä–æ—Ñ–∏–ª—å
      const telegramID = await this.tgProfilesRepo.getTelegramProfileById(id);

      // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ Telegram –ø—Ä–æ—Ñ–∏–ª—å
      if (!telegramID) {
        const userID = await this.usersRepo.createUser();

        // –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –µ—Å—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userID) {
          const telegramProfile = {
            user_id: userID,
            ...user,
          };

          // –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–æ—Ñ–∏–ª—è
          await this.tgProfilesRepo.createTelegramProfile(telegramProfile);
        }
      }
    }

    await ctx.reply(
      MESSAGES.WELCOME,
      Markup.keyboard([BUTTONS.MAIN_MENU]).resize(),
    );
    await this.sendMenu(ctx);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
   * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
   */
  public async sendMenu(ctx: Context): Promise<void> {
    await ctx.reply(
      MESSAGES.SERVER_INFO,
      Markup.inlineKeyboard([
        [Markup.button.url('üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'https://your-vpn-link.com')],
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'update_status')],
        [Markup.button.url('üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', 'https://t.me/YouFastVPN')],
      ]),
    );
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID.
   * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf —Å —Å–µ—Å—Å–∏–µ–π
   * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å
   */
  private async deleteMessage(
    ctx: Context,
    messageId: number,
  ): Promise<boolean> {
    if (!messageId) return false;

    try {
      await ctx.deleteMessage(messageId);
      this.logger.log(
        `[TelegramService.deleteMessage] - –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId}`,
      );
      return true;
    } catch (error) {
      this.logger.error(
        `[TelegramService.deleteMessage] - –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId}`,
        error,
      );
      return false;
    }
  }
}
