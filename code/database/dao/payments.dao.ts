import { Inject, Injectable } from '@nestjs/common';
import { DATABASE_TOKEN } from 'code/common/constants';
import { WinstonService } from 'code/logger/winston.service';
import { Pool } from 'pg';
import { Transaction } from '../common/types';
import { PaymentEntity } from '../common/entities';

/**
 * DAO —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã.
 */
@Injectable()
export class PaymentsDao {
  /**
   * @param logger - —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
   * @param db - —Å–æ–µ–¥–µ–Ω–µ–Ω–∏–µ —Å –ë–î.
   */
  constructor(
    private readonly logger: WinstonService,
    @Inject(DATABASE_TOKEN) private readonly db: Pool,
  ) {}

  /**
   * –ò—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (transaction_id).
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Robokassa).
   *
   * @param id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (transaction_id)
   * @returns –û–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
   * @throws –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
   */
  async findByTransactionId(id: string): Promise<Transaction | null> {
    const query = {
      name: 'find-by-transaction-id',
      text: `
      SELECT * 
      FROM payments
      WHERE transaction_id = $1
    `,
      values: [id], // üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (value ‚Üí values)
    };

    try {
      const { rows } = await this.db.query<PaymentEntity>(query);

      if (rows.length == 0) return null;

      const row = rows[0];
      const transaction: Transaction = {
        ...row,
        paymentMethod: row.payment_method,
        transactionId: row.transaction_id,
        createdAt: row.created_at,
        userId: row.user_id,
        paidAt: row.paid_at,
      };

      return transaction;
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : 'Unknown error';

      this.logger.error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –ë–î (id=${id}): ${errorMessage}`,
      );
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
  }
}
